// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowIntro.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Insurance Rates")]
    public partial class InsuranceRatesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InsuranceRates.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Insurance Rates", "\tIn order to know what can be offered to a client\r\n\tAs an agent\r\n\tI\'d like to be " +
                    "albe to calculate insurance rate", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate life rates")]
        [NUnit.Framework.CategoryAttribute("LifeInsurance")]
        [NUnit.Framework.TestCaseAttribute("Male", "32", "A", "Higher", "Premium", "225", "20.62", null)]
        [NUnit.Framework.TestCaseAttribute("Female", "32", "A", "Higher", "Premium", "230", "21.08", null)]
        [NUnit.Framework.TestCaseAttribute("Female", "32", "A", "Higher", "Standard", "80", "7.33", null)]
        [NUnit.Framework.TestCaseAttribute("Female", "52", "C", "Higher", "Premium", "198", "18.15", null)]
        public virtual void CalculateLifeRates(string gender, string age, string healthRate, string education, string rate, string expectedYearly, string expectedMontly, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LifeInsurance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate life rates", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Gender",
                        "Expected Lifespan"});
            table1.AddRow(new string[] {
                        "Male",
                        "75"});
            table1.AddRow(new string[] {
                        "Female",
                        "82"});
#line 8
 testRunner.Given("following life expectancies exist", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Health Rate",
                        "Expected Lifespan"});
            table2.AddRow(new string[] {
                        "A",
                        "87"});
            table2.AddRow(new string[] {
                        "B",
                        "79"});
            table2.AddRow(new string[] {
                        "C",
                        "71"});
#line 12
 testRunner.And("following health rate expectancies exist", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Gender",
                        "Age",
                        "Health Rate",
                        "Education",
                        "Rate"});
            table3.AddRow(new string[] {
                        string.Format("{0}", gender),
                        string.Format("{0}", age),
                        "<HealthRate>",
                        string.Format("{0}", education),
                        string.Format("{0}", rate)});
#line 17
 testRunner.When("I submit following request for life insurance", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yearly",
                        "Monthly"});
            table4.AddRow(new string[] {
                        string.Format("{0}", rate),
                        string.Format("{0}", expectedYearly),
                        string.Format("{0}", expectedMontly)});
#line 20
 testRunner.Then("the life insurance calculation is as follows", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
